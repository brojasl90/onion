@using Web.Enum
@model Infrastructure.Models.RegistroInventario

@{
    ViewBag.Title = "Nuevo registro";
}

<h2>@ViewBag.Title</h2>

@{
    Infrastructure.Models.Usuario oUsuario;

    string nomUser = "";
    int idUsuario = 0;

    if (Session["User"] != null)
    {
        oUsuario = (Infrastructure.Models.Usuario)Session["User"];
        if (oUsuario != null)
        {
            idUsuario = oUsuario.IdUsuario;
            nomUser = string.Format("{0} {1} {2}.", oUsuario.Nombre, oUsuario.PrimerApellido, oUsuario.SegundoApellido.Substring(0, 1));
        }
    }
}

@using (Html.BeginForm("Save", "Registro", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group col-md-12 d-flex">
            <div class="col-md-7">
                <h4 class="m-1">Informaci&oacute;n del nuevo registro</h4>
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.IdUsuario, new { htmlAttributes = new { @class = "form-control visually-hidden", @Value = @idUsuario, @readonly = "readonly" } })
                @*@Html.ValidationMessageFor(model => model.IdUsuario, "", new { @class = "text-danger" })*@
            </div>
            <div class="col-md-4 d-flex">
                <div class="col-5 mt-1">
                    @Html.LabelFor(model => model.FechaIngreso, htmlAttributes: new { @class = "control-label" }):
                </div>
                <div class="col-md-6">
                    @Html.EditorFor(model => model.FechaIngreso, new { htmlAttributes = new { @class = "form-control bg-white border border-0", @Value = DateTime.Now.ToString("yyyy-MM-dd"), @readonly = "readonly" } })
                </div>
            </div>
        </div>
    </div>

    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.TipoGestion, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.TipoGestion, new SelectList(Enum.GetValues(typeof(ETipoGestion))), "Seleccione un Tipo...", htmlAttributes: new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.TipoGestion, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="modal fade" id="listProducto" tabindex="-1" aria-labelledby="listProducto" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h5 class="modal-title text-white" id="exampleModalLabel">Seleccionar Productos</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @{Html.RenderAction("_VistaProducto", "Registro");}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary rounded m-1" data-bs-dismiss="modal"><i class='bx bxs-x-circle'></i><span class="px-1">Cerrar</span></button>
                </div>
            </div>
        </div>
    </div>

    <div class=" col-md-12 border border-2 rounded my-2">
        <div class="d-flex">
            <div class="col-sm-10">
                <h3>Productos seleccionados</h3>
            </div>
            <div class="col-sm-2">
                <button type="button" class="btn btn-outline-primary rounded m-1" data-bs-toggle="modal" data-bs-target="#listProducto">
                    <i class='bx bx-plus'></i> <span>Agregar Productos</span>
                </button>
            </div>
        </div>
        <div id="resultadoDetalle">
            @if (Web.ViewModel.Movimiento.Instancia.Items.Count() > 0)
            {
                @Html.Partial("~/Views/Registro/_LineaDetalle.cshtml", (List<Web.ViewModel.ViewModelLineaInventario>)ViewBag.DetalleOrden)
            }
            else
            {
                <div class="alert alert-primary alert-dismissible fade show" role="alert">
                    La orden no tiene libros asignados
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
                        @*<span aria-hidden="true">&times;</span>*@
                    </button>
                </div>
            }

        </div>
    </div>
    <!-- Submit -->

    <div class="form-group">
        <hr />
        <div class="row">
            <div class="col-12 d-md-flex justify-content-md-end">
                <button class="btn btn-primary rounded m-1" type="submit" id="btnOrdenar"><i class='bx bx-save'></i><span class="px-1">Guardar</span></button>
                <a href="@Url.Action("Index", "Registro")" class="btn btn-outline-secondary rounded m-1">
                    <i class='bx bxs-x-circle'></i>
                    <span>Cancelar</span>
                </a>
            </div>
        </div>
    </div>
}
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryajax")

    <script type="text/javascript">

        //Actualizar cantidad de libros en el carrito
        //Cambio de cantidad en caja de texto
        function updateCantidad(ctr) {
            var txtCantidad = $(ctr);
            var cantidad = txtCantidad.val();
            var id = txtCantidad.data("productoid");
            $.ajax({
                type: "GET",
                dataType: 'text',
                url: "/Registro/actualizarCantidad",
                data: { "idProd": id, "cantidad": cantidad },
                success: function (data) {
                    $("#resultadoDetalle").html('');
                    $("#resultadoDetalle").html(data);
                    updateCantLibros();
                }, error: function (xhr, status, error) {
                    console.log("Error: " + error + ", No Error: " + xhr.status);
                },
            });
        }

        function updateMovimiento(ctr) {
            var txtCantidad = $(ctr);
            var cantidad = txtCantidad.val();
            var id = txtCantidad.data("movimientoid");
            $.ajax({
                type: "GET",
                dataType: 'text',
                url: "/Registro/actualizarTipoMovimiento",
                data: { "idProd": id, "pTipM": cantidad },
                success: function (data) {
                    $("#resultadoDetalle").html('');
                    $("#resultadoDetalle").html(data);
                    updateCantLibros();
                }, error: function (xhr, status, error) {
                    console.log("Error: " + error + ", No Error: " + xhr.status);
                },
            });
        }
        //Actualizar cantidad de libros en el menú
        function updateCantLibros() {
            $.ajax({
                type: "GET",
                dataType: 'text',
                url: "/Orden/actualizarOrdenCantidad",
                success: function (data) {
                    $("#cantidadLibros").html('');
                    $("#cantidadLibros").html(data);
                }, error: function (xhr, status, error) {
                    console.log("Error: " + error + ", No Error: " + xhr.status);
                },
            });
        }


    </script>
}

